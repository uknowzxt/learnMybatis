

返回SqlSessionFactory 其实就是从Configuration 解析
org.apache.ibatis.session.SqlSessionFactoryBuilder.build(java.io.InputStream)
 >org.apache.ibatis.builder.xml.XMLConfigBuilder // 构造函数
   >org.apache.ibatis.builder.xml.XMLConfigBuilder.parse //解析出configuration
     >org.apache.ibatis.builder.xml.XMLConfigBuilder.parseConfiguration  //解析mybatis-config.xml内容
       >org.apache.ibatis.parsing.XPathParser.evaluate   //好像没用到哦 保留意见
        >org.apache.ibatis.builder.xml.XMLConfigBuilder.mapperElement   //拿到具体的mappers节点, 判断出其下的节点是mapper开头还是package开头, 如果是mapper再具体判断属性是url/class/resource , 判断好了之后如果是单独的classconfiguration.addMappers(mapperPackage);   如果是很多的class
         >org.apache.ibatis.session.SqlSessionFactoryBuilder.build(org.apache.ibatis.session.Configuration) //根据configuration创建DefaultSqlSessionFactory
          >org.apache.ibatis.session.defaults.DefaultSqlSessionFactory.DefaultSqlSessionFactory //最终解析出来的factory


拿到SqlSession 进行对我们的执行器进行初始化 SimpleExecutor
org.apache.ibatis.session.defaults.DefaultSqlSessionFactory.openSession()
 >org.apache.ibatis.session.defaults.DefaultSqlSessionFactory.openSessionFromDataSource (执行器类型,level,autocommit) //返回sqlSession的
  >org.apache.ibatis.transaction.TransactionFactory.newTransaction(javax.sql.DataSource, org.apache.ibatis.session.TransactionIsolationLevel, boolean) //拿到事务管理器
    >org.apache.ibatis.session.Configuration.newExecutor(org.apache.ibatis.transaction.Transaction, org.apache.ibatis.session.ExecutorType) //拿到执行器
      >org.apache.ibatis.executor.SimpleExecutor  //根据执行器类型拿到简单执行器
        >org.apache.ibatis.executor.CachingExecutor  //如果允许缓存 使用一级缓存 自动
          >org.apache.ibatis.plugin.InterceptorChain.pluginAll //责任链模式拦截器 (拦截器就在这里了!!!!). interceptor的签名的type类型都是executor.class



操作数据库
org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(java.lang.String, java.lang.Object)
 >org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(java.lang.String, java.lang.Object)
   >org.apache.ibatis.session.Configuration.getMappedStatement(java.lang.String) //通过namespace+id 拿到mappedStatement.  mappedStatement就是usedrMapper.xml中的一个表达式
    >org.apache.ibatis.executor.CachingExecutor.query(org.apache.ibatis.mapping.MappedStatement, java.lang.Object, org.apache.ibatis.session.RowBounds, org.apache.ibatis.session.ResultHandler)
     >org.apache.ibatis.executor.CachingExecutor.createCacheKey //创建缓存的key 由 id+sql+limit+offset+....组成
      >org.apache.ibatis.executor.CachingExecutor.query(org.apache.ibatis.mapping.MappedStatement, java.lang.Object, org.apache.ibatis.session.RowBounds, org.apache.ibatis.session.ResultHandler, org.apache.ibatis.cache.CacheKey, org.apache.ibatis.mapping.BoundSql)
         >org.apache.ibatis.executor.BaseExecutor.queryFromDatabase //如果缓存没有查询数据库
           >org.apache.ibatis.executor.BaseExecutor.doQuery   //走数据库后会调用
             >org.apache.ibatis.executor.statement.PreparedStatementHandler.query //里面就是jdbc的statement了,
               >org.apache.ibatis.executor.resultset.ResultSetHandler.handleResultSets
                >org.apache.ibatis.executor.resultset.DefaultResultSetHandler //处理结果集
               >

     cache key: id +sql+limit+offsetxxx


获取mapper：
org.apache.ibatis.session.defaults.DefaultSqlSession.getMapper
   >org.apache.ibatis.session.Configuration.getMapper
    >org.apache.ibatis.binding.MapperRegistry.getMapper
      >org.apache.ibatis.binding.MapperProxyFactory.newInstance(org.apache.ibatis.session.SqlSession)
        >org.apache.ibatis.binding.MapperMethod.execute

sql:
  org.apache.ibatis.binding.MapperMethod.execute
    >org.apache.ibatis.session.SqlSession.selectOne(java.lang.String, java.lang.Object)
      >org.apache.ibatis.executor.BaseExecutor.query(org.apache.ibatis.mapping.MappedStatement, java.lang.Object, org.apache.ibatis.session.RowBounds, org.apache.ibatis.session.ResultHandler)
        >org.apache.ibatis.mapping.MappedStatement.getBoundSql
